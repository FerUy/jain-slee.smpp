<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "../User_Guide.ent">%BOOK_ENTITIES;]>

<section id="ratype_sbb_code_examples">

	<title>Sbb Code Examples</title>
	
	<section id="Accesing_resource_adaptor_from_Sbb">
	<title>Accesing resource adaptor from Sbb</title>
	<para>Sbb explicitly lookup resource adaptor object using resource-adaptor-entity-binding element in the SBB's deployment descriptor</para>
	
	
		<programlisting language="java">
SmppTransactionACIFactory smppAcif;
SmppSession smppSession;

public void setSbbContext(SbbContext sbbContext) {
        this.sbbContext = sbbContext;
        try {
            logger.info("Called setSbbContext PtinAudioConf!!!");
            Context myEnv = (Context) new InitialContext().lookup("java:comp/env");
           
            smppSession = (SmppSession) 
                    myEnv.lookup("slee/resources/smpp/5.0/smppSession");            
            smppAcif = (SmppTransactionACIFactory) 
                    myEnv.lookup("slee/resources/smpp/5.0/factoryprovider");
        } catch (NamingException ne) {
            logger.warn("Could not set SBB context:" + ne.getMessage());
        }
}
		</programlisting>	
	</section>
	
	<section id="Handling_Message_from_SMSC">
	<title>Handling Message from SMSC</title>
	<para>Each time message received from SMSC, the resource adaptor emits DELIVER_SM message. The DeliverSM event object is used to create the corresponding response DeliverSMResp passing the command_status. The SmppTransaction can be retrieved from ActivityContextInterface object. The SmppSession retrieved from SmppTransaction is used to send back the response. Once the response is sent, the Activity dies. </para>
	
	
		<programlisting language="java">
    public void onSmsMessage(DeliverSM event, ActivityContextInterface aci) {
            ....
            DeliverSMResp resp = event.createSmppResponseEvent(SmppTransaction.ESME_ROK);
            SmppTransaction txn = (SmppTransaction)aci.getActivity();
            txn.getSmppSession().sendResponse(txn, response);
    }
		</programlisting>	
	</section>	
	
	<section id="Submitting_message_from_SBB">
	<title>Submitting message from SBB</title>
	<para>The SmppSession object should be used to prepare outgoing message and a SmppTransaction. </para>
	
	
		<programlisting language="java">
    public void onSomeEvent(SomeEvent event, ActivityContextInterface aci) {
        SubmitSM submitSm = (SubmitSM)smppSession.createSmppRequest(SmppRequest.SUBMIT_SM);

        Address esmeAddress = smppSession.createAddress(1, 0, "501");
        Address destAddress = smppSession.createAddress(1, 0, "919960666666");
        
        submitSm.setEsmeAddress(esmeAddress);
        submitSm.setEsmeAddress(destAddress);
        submitSm.setMessage("Hello World".getBytes());

        SmppTransaction submitTxn = smppSession.sendRequest(submitSm);

        // attach to the new activity so we get the response
        ActivityContextInterface newaci = smppAcif.getActivityContextInterface(submitTxn);
        newaci.attach(getSbbLocalObject());
}
		</programlisting>	
	</section>	

</section>